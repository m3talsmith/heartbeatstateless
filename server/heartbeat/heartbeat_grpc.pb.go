// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.1
// source: heartbeat.proto

package heartbeat

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// HeartbeatAPIClient is the client API for HeartbeatAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HeartbeatAPIClient interface {
	Send(ctx context.Context, in *Beat, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type heartbeatAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewHeartbeatAPIClient(cc grpc.ClientConnInterface) HeartbeatAPIClient {
	return &heartbeatAPIClient{cc}
}

func (c *heartbeatAPIClient) Send(ctx context.Context, in *Beat, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/heartbeat.HeartbeatAPI/Send", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HeartbeatAPIServer is the server API for HeartbeatAPI service.
// All implementations must embed UnimplementedHeartbeatAPIServer
// for forward compatibility
type HeartbeatAPIServer interface {
	Send(context.Context, *Beat) (*emptypb.Empty, error)
	mustEmbedUnimplementedHeartbeatAPIServer()
}

// UnimplementedHeartbeatAPIServer must be embedded to have forward compatible implementations.
type UnimplementedHeartbeatAPIServer struct {
}

func (UnimplementedHeartbeatAPIServer) Send(context.Context, *Beat) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Send not implemented")
}
func (UnimplementedHeartbeatAPIServer) mustEmbedUnimplementedHeartbeatAPIServer() {}

// UnsafeHeartbeatAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HeartbeatAPIServer will
// result in compilation errors.
type UnsafeHeartbeatAPIServer interface {
	mustEmbedUnimplementedHeartbeatAPIServer()
}

func RegisterHeartbeatAPIServer(s grpc.ServiceRegistrar, srv HeartbeatAPIServer) {
	s.RegisterService(&HeartbeatAPI_ServiceDesc, srv)
}

func _HeartbeatAPI_Send_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Beat)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HeartbeatAPIServer).Send(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/heartbeat.HeartbeatAPI/Send",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HeartbeatAPIServer).Send(ctx, req.(*Beat))
	}
	return interceptor(ctx, in, info, handler)
}

// HeartbeatAPI_ServiceDesc is the grpc.ServiceDesc for HeartbeatAPI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HeartbeatAPI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "heartbeat.HeartbeatAPI",
	HandlerType: (*HeartbeatAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Send",
			Handler:    _HeartbeatAPI_Send_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "heartbeat.proto",
}
